@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model AyyBlog.ViewModel.PostDTO


<script src="~/ckeditor/ckeditor.js"></script>

<section>

    <div class="container">

        <div class="post-create">

            <form asp-controller="Post" asp-action="CreatePost" enctype="multipart/form-data" method="post">
                <div  asp-validation-summary="All"></div>
                <div id="error" style="color:red"></div>
                <br />

                <h3>Title</h3>

                <input asp-for="title" type="text" placeholder="Title" />
                <span asp-validation-for="title" class="text-danger"></span>
                <br />

                <h3>Post Image</h3>

                <input type="file" accept="image/*" id="img" name="postImg" asp-for="postImg" />
                <img id="output" src="" />

                <span asp-validation-for="postImg" class="text-danger"></span>

                <br />

                <h3>Description</h3>

                <input asp-for="summary" type="text" placeholder="summary" />
                <span asp-validation-for="summary" class="text-danger"></span>
                <br />

                <div class="content">
                    <h3>Content</h3>
                    <textarea id="mytextarea" name="content">
                            Hello, World!
                    </textarea>
                </div>
                <span asp-validation-for="content" class="text-danger"></span>
                <br />

                <button id="sumbit" type="submit" class="sumbit mt-5">Create</button>
            </form>
        </div>

    </div>

</section>

<script>

//make sure file is image

    $(function () {
        $("#sumbit").click(function () {
            $("#error").html("");

            if ($("#img").val() == "") {

                $("#error").append("Please Fill the Missing");
                return false;
            }

            if ($("#img").val() != "") {
                var filename = document.getElementById("img").value;
                var extentionImg = filename.substr(filename.lastIndexOf('.') + 1)
                var validExtentions = ['jpg', 'png', 'gif', 'bmp'];
                if ($.inArray(extentionImg, validExtentions) == -1) {
                    $("#errorr").append("Please Fill the Missing");
                    return false;
                }

                var myFileSize = document.getElementById("img").files[0].size / 1024 / 1024;
                if (myFileSize > 2) {
                    $("#img").append("Please Fill the Missing");
                    return false;
                }
            }
        });
    });

    var loadFile = function (event) {
        var output = document.getElementById('output');
        output.src = URL.createObjectURL(event.target.files[0]);
        output.onload = function () {
            URL.revokeObjectURL(output.src) // free memory
        }
    };









   @*class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }

        // ...
        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }
                // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage", "Post")', true);
            xhr.responseType = 'json';
         }

        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }
        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }*@


    //ClassicEditor
    //    .create(document.querySelector('#mytextarea'),
    //        {
    //            language: 'es', ckfinder: { uploadUrl: '/Post/CreatePost' },

    //        })

    //    .catch(error => { console.error(error); });

    ClassicEditor
        .create(document.querySelector('#mytextarea'), {

             language: 'es', ckfinder: { uploadUrl: '/Post/CreatePost' },

        })
        .then(editor => {
            console.log('Editor was initialized', editor);
        })
        .catch(err => {
            console.error(err.stack);
        });
    ClassicEditor.execute('fontColor', { value: 'rgb(30, 188, 97)' });

</script>